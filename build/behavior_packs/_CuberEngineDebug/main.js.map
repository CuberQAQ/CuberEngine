{"version":3,"sources":["main.ts"],"names":[],"mappings":"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","file":"../CuberEngine/scripts/main.js","sourcesContent":["import { initCuberSnow } from \"./CuberSnow\";\nimport { initData } from \"./Data\";\nimport { initServerManage } from \"./ServerManage\";\nimport { initSmallGame } from \"./SmallGame\";\nimport { initTest } from \"./Test\";\nimport { tellErrorMessage, tellMessage } from \"./utils\";\nconst moduleName = \"CuberEngine\";\nconst moduleVersion = \"0.1.0\";\n// Data\ntry {\n  let module = initData();\n  //tellMessage(moduleName, \"Module §e§l\" + module.moduleName + \"§r(§e\" + module.moduleVersion + \"§r) Loaded\");\n} catch (e) {\n  if (e instanceof Error) {\n    tellErrorMessage(\n      moduleName,\n      \"ERROR: Catch a Exceptation when Init Module §lData§r§c: \\n§e\" + e.name + \"\\n\" + e.message + \"\\n\" + e.stack\n    );\n  } else if (typeof e == \"string\") {\n    tellErrorMessage(moduleName, \"ERROR: Catch a Exceptation when Init Module §lData§r§c: \\n§e\" + e);\n  } else {\n    tellErrorMessage(moduleName, \"ERROR: Catch a Exceptation when Init Module §lData§r§c (Type:\" + typeof e + \")\");\n  }\n}\n\n// ServerManage\ntry {\n  let module = initServerManage();\n  //tellMessage(moduleName, \"Module §e§l\" + module.moduleName + \"§r(§e\" + module.moduleVersion + \"§r) Loaded\");\n} catch (e) {\n  if (e instanceof Error) {\n    tellErrorMessage(\n      moduleName,\n      \"ERROR: Catch a Exceptation when Init Module §lServerManage§r§c: \\n§e\" +\n        e.name +\n        \"\\n\" +\n        e.message +\n        \"\\n\" +\n        e.stack\n    );\n  } else if (typeof e == \"string\") {\n    tellErrorMessage(moduleName, \"ERROR: Catch a Exceptation when Init Module §lServerManage§r§c: \\n§e\" + e);\n  } else {\n    tellErrorMessage(\n      moduleName,\n      \"ERROR: Catch a Exceptation when Init Module §lServerManage§r§c (Type:\" + typeof e + \")\"\n    );\n  }\n}\n\n// CuberSnow\ntry {\n  let module = initCuberSnow();\n  //tellMessage(moduleName, \"Module §e§l\" + module.moduleName + \"§r(§e\" + module.moduleVersion + \"§r) Loaded\");\n} catch (e) {\n  if (e instanceof Error) {\n    tellErrorMessage(\n      moduleName,\n      \"ERROR: Catch a Exceptation when Init Module §lCuberSnow§r§c: \\n§e\" + e.name + \"\\n\" + e.message + \"\\n\" + e.stack\n    );\n  } else if (typeof e == \"string\") {\n    tellErrorMessage(moduleName, \"ERROR: Catch a Exceptation when Init Module §lCuberSnow§r§c: \\n§e\" + e);\n  } else {\n    tellErrorMessage(moduleName, \"ERROR: Catch a Exceptation when Init Module §lCuberSnow§r§c (Type:\" + typeof e + \")\");\n  }\n}\n\n// SmallGame\ntry {\n  let module = initSmallGame();\n  //tellMessage(moduleName, \"Module §e§l\" + module.moduleName + \"§r(§e\" + module.moduleVersion + \"§r) Loaded\");\n} catch (e) {\n  if (e instanceof Error) {\n    tellErrorMessage(\n      moduleName,\n      \"ERROR: Catch a Exceptation when Init Module §lSmallGame§r§c: \\n§e\" + e.name + \"\\n\" + e.message + \"\\n\" + e.stack\n    );\n  } else if (typeof e == \"string\") {\n    tellErrorMessage(moduleName, \"ERROR: Catch a Exceptation when Init Module §lSmallGame§r§c: \\n§e\" + e);\n  } else {\n    tellErrorMessage(moduleName, \"ERROR: Catch a Exceptation when Init Module §lSmallGame§r§c (Type:\" + typeof e + \")\");\n  }\n}\n\n// Test\ntry {\n  let module = initTest();\n  //tellMessage(moduleName, \"Module §e§l\" + module.moduleName + \"§r(§e\" + module.moduleVersion + \"§r) Loaded\");\n} catch (e) {\n  if (e instanceof Error) {\n    tellErrorMessage(\n      moduleName,\n      \"ERROR: Catch a Exceptation when Init Module §lTest§r§c: \\n§e\" + e.name + \"\\n\" + e.message + \"\\n\" + e.stack\n    );\n  } else if (typeof e == \"string\") {\n    tellErrorMessage(moduleName, \"ERROR: Catch a Exceptation when Init Module §lTest§r§c: \\n§e\" + e);\n  } else {\n    tellErrorMessage(moduleName, \"ERROR: Catch a Exceptation when Init Module §lTest§r§c (Type:\" + typeof e + \")\");\n  }\n}\n\ntellMessage(moduleName, \"Package §e§lCuberEngine§r (§e\" + moduleVersion + \"§r) Loaded\");\n"],"sourceRoot":"../../../scripts/"}